name: Laravel-CD without Test

on:
  push:
    branches: [ "master" ]

env:
  # 이미지 이름을 환경변수로 등록합니다.
  IMAGE_NAME: jiyu1948/brave_webtoon
  IMAGE_TAG_BACK: laraback
  IMAGE_TAG_FRONT: larafront

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
#    - uses: shivammathur/setup-php@15c43e89cdef867065b0213be354c2841860869e
#      with:
#        php-version: '8.2'
#    - uses: actions/checkout@v3
#    - name: Copy .env
#      run: php -r "file_exists('.env') || copy('.env.example', '.env');"
#    - name: Install Dependencies
#      run: composer install --ignore-platform-reqs -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
#    - name: Generate key
#      run: php artisan key:generate
#    - name: Directory Permissions
#      run: chmod -R 777 storage bootstrap/cache
#    - name: Create Database
#      run: |
#        mkdir -p database
#        touch database/database.sqlite
#    - name: Execute tests (Unit and Feature tests) via PHPUnit
#      env:
#        DB_CONNECTION: sqlite
#        DB_DATABASE: database/database.sqlite
#      run: vendor/bin/phpunit

    - name: Check out code
      uses: actions/checkout@v2

      # Container Registry에 로그인합니다.
    - name: DockerHub Login
      uses: docker/login-action@v3
      with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 애플리케이션을 이미지로 build 하고 push합니다.
    - name: Push to GitHub Packages
      uses: docker/build-push-action@v5
      with:
        push: true
        tags: |
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_BACK }}

    - name: docker FE image build
      run: |
          cd ./frontend
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:${{ env.IMAGE_TAG_FRONT }} .
    - name: docker Hub push
      run: |
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:${{ env.IMAGE_TAG_FRONT }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    env:
        deploy-directory: ./deploy
    steps:
        - name: Get Github Actions IP
          id: ip
          uses: haythem/public-ip@v1.2

        - name: Configure AWS Credentials For GitHub Actions
          uses: aws-actions/configure-aws-credentials@v2
          with:
            aws-access-key-id: ${{ secrets.AWS_IAM_PUBLIC }}
            aws-secret-access-key: ${{ secrets.AWS_IAM_PRIVATE }}
            aws-region: ap-northeast-2

        - name: Add Github Actions IP to Security group
          run: |
            aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

        - name: DockerImagePull
          uses: appleboy/ssh-action@v1.0.0
          with:
            host: ${{ secrets.AWS_EC2_PUBLIC_DNS }}
            username: ec2-user
            key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
            port: 22
            timeout: 40s
            script_stop: true
            script: |
              echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
              docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:${{ env.IMAGE_TAG_BACK }} || exit 1
              docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:${{ env.IMAGE_TAG_FRONT }} || exit 1

        #     docker-compose with blue-green
        - name: Deploy sh
          uses: appleboy/ssh-action@v1.0.0
          with:
            host: ${{ secrets.AWS_EC2_PUBLIC_DNS }}
            username: ec2-user
            key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
            port: 22
            timeout: 40s
            script_stop: true
            script: |
              pwd
              ls
              cd /home/ec2-user/deploy
              sh deploy.sh

        - name: Remove Github Actions IP From Security Group
          run: |
            aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
